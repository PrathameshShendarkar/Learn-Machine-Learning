# -*- coding: utf-8 -*-
"""Untitled

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12juq89JNAVBIp83Z3u4CK4t2Xagde0kb

Basic Operations of Numpy
---
"""

import numpy as np

# To create array range from 0 to 4
x = np.arange(5)
print(x)

# We could also create array in this form
y = np.arange(1,10,2)
y

# To create a 2d array
b = np.array([[2, 4, 6], [6, 8, 10]], np.int32)
print(b)

# Dimensions checking
print(b.ndim)

#Shape Checking
print(b.shape)

#Length Checking
print(len(b))

# using linspace
a = np.linspace(0,10,5)
a

# Common Arrays

# Creation of singular arrays
a = np.ones((3,3))
print(a)

# Creation of Diagonal Matrix
b = np.eye(3,3)
print(b)

# Creation of array using diag function
z = np.diag([1,2,3,4])
z

# Creation of Random Array

ran = np.random.rand(4) #Uniform Distribution
print(ran)

ranx = np.random.randn(4) #Normal Distribution
print(ranx)

# Accessing, Assigning and Slicing

# 1. Acessing
a = np.array([1,2,3,4,5])
print(a[2])

# 2. Assigning
a[1] = 0
print(a)

# 3. Slicing
b = a[1::2] # From index 1 slice till last element with step size of 2
print(b)

# Views and Copies
# Check if two variables share same memory or not

# Here a and b are from slicing content
print(np.shares_memory(a,b)) # It is basically stating that a nd b shares same memory

c = b.copy()
print(np.shares_memory(b,c))
print(np.shares_memory(a,c))

# Fancing Arrays
# You could create array of random numbers and as many as you want

a = np.random.randint(0,10,13) # start from 0 till 10 and create 13 random integers
a

# Extracting the array with the condition

mask = [a%2 == 0] # It is the same as condition
extract_from_a = a[mask] # Applying condition on arrays
print(extract_from_a)

# Get specific positional elements of array a
a = np.arange(10)
a[[2,3,4,2]]

"""# **Numerical Operations**"""

